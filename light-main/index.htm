<!DOCTYPE html>
<!-- saved from url=(0070)https://bit.webduino.io/blockly/live-preview.html#-Mifrq_Nh68l4e2q4oBk -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
  <title>Webduino Blockly Demo 02</title>
  <script src="./index_files/jquery.min.js.下載"></script>
  <script src="./index_files/webduino-all.min.js.下載"></script>
  <script src="./index_files/MessageTransport.min.js.下載"></script>
  <script src="./index_files/webduino-blockly.min.js.下載"></script>
  <script src="./index_files/firebase.min.js.下載"></script>
  <script src="./index_files/runtime.min.js.下載"></script><script src="./index_files/BitLedMatrix-blockly.js.下載"></script><script src="./index_files/BitLedMatrix.js.下載"></script><script src="./index_files/BitButton.js.下載"></script><script src="./index_files/BitButton-blockly.js.下載"></script>

  <style>#demo-area-02-light img {
  height: 200px;
  display: none;
  pointer-events: auto!important;
}

#demo-area-02-light.on #demo-area-02-on {
  display: inline-block;
  pointer-events: auto!important;
}

#demo-area-02-light.off #demo-area-02-off {
  display: inline-block;
  pointer-events: auto!important;
}</style>
</head>

<body>
  <div><div id="demo-area-02-light" class="off">
    <img src="./index_files/off.jpg" id="demo-area-02-off">
    <img src="./index_files/on.jpg" id="demo-area-02-on">
  </div></div>

  <script>'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } step("next"); }); }; }

_asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
  var button, matrix, i, j, button2, Light;
  return regeneratorRuntime.wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:

          boardReady({ board: 'Bit', device: 'bite300e5', transport: 'mqtt' }, (function () {
            var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(board) {
              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      board.samplingInterval = 250;
                      matrix = getMatrix(board, 4, 25);
                      button = getPullupButton(board, 35);
                      button2 = getPullupButton(board, 27);
                      document.getElementById("demo-area-02-light").addEventListener("click", _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
                        return regeneratorRuntime.wrap(function _callee$(_context) {
                          while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                if (document.getElementById("demo-area-02-light").className == "on") {
                                  document.getElementById("demo-area-02-light").className = "off";
                                } else {
                                  document.getElementById("demo-area-02-light").className = "on";
                                }
                                if (document.getElementById("demo-area-02-light").className == "on") {
                                  matrix.setColor('#ff0000');
                                }
                                if (document.getElementById("demo-area-02-light").className == "off") {
                                  matrix.setColor('#000000');
                                }

                              case 3:
                              case 'end':
                                return _context.stop();
                            }
                          }
                        }, _callee, this);
                      })));

                    case 5:
                    case 'end':
                      return _context2.stop();
                  }
                }
              }, _callee2, this);
            }));

            return function (_x) {
              return ref.apply(this, arguments);
            };
          })());

          button.on('pressed', _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
            var j_inc;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    i = 0;

                  case 1:
                    if (!(i <= 24)) {
                      _context3.next = 10;
                      break;
                    }

                    if (i % 2 == 0) {
                      Light = '#ff0000';
                    }
                    if (i % 2 == 1) {
                      Light = '#3366ff';
                    }
                    matrix.setColor(i + 1 - 1, Light);
                    _context3.next = 7;
                    return delay(1);

                  case 7:
                    i++;
                    _context3.next = 1;
                    break;

                  case 10:
                    j_inc = 1;

                    if (i > 0) {
                      j_inc = -j_inc;
                    }
                    j = i;

                  case 13:
                    if (!(j_inc >= 0 ? j <= 0 : j >= 0)) {
                      _context3.next = 20;
                      break;
                    }

                    matrix.setColor(j + 1 - 1, '#000000');
                    _context3.next = 17;
                    return delay(1);

                  case 17:
                    j += j_inc;
                    _context3.next = 13;
                    break;

                  case 20:
                  case 'end':
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          })));

        case 2:
        case 'end':
          return _context4.stop();
      }
    }
  }, _callee4, this);
}))();</script>


</body></html>
